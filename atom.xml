<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Roozky's Wonders]]></title>
  <link href="http://roozky.herokuapp.com//atom.xml" rel="self"/>
  <link href="http://roozky.herokuapp.com//"/>
  <updated>2015-09-20T19:24:05+01:00</updated>
  <id>http://roozky.herokuapp.com//</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mastering cURL by Example]]></title>
    <link href="http://roozky.herokuapp.com//blog/2015/09/09/mastering-curl-by-example/"/>
    <updated>2015-09-09T19:13:57+01:00</updated>
    <id>http://roozky.herokuapp.com//blog/2015/09/09/mastering-curl-by-example</id>
    <content type="html"><![CDATA[<p>This is a list of cURL commands I found myself using regularly. More examples with deeper explanation can be
found <a href="http://curl.haxx.se/docs/httpscripting.html">here</a></p>

<h3>If you find yourself sitting behind a proxy</h3>

<p>If you find yourself on a computer that is sitting behind a proxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --proxy http://proxy.example.org:4321 http://remote.example.org/
</span></code></pre></td></tr></table></div></figure>


<h3>Form submit with data url-encoded manually</h3>

<p>Simulates a form submission by <code>POST</code> with <code>application/x-www-form-urlencoded</code> content type and data url-encoded by you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -d <span class="s2">&quot;year=1905&amp;name=You+Me&quot;</span> http://www.example.com/form-submit
</span></code></pre></td></tr></table></div></figure>


<h3>Form submit with data url-encoding automatically</h3>

<p>Simulates a form submission by <code>POST</code> with <code>application/x-www-form-urlencoded</code> content type and data url-encoded by curl itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl --data-urlencode <span class="s2">&quot;name=Joe Me&quot;</span> http://www.example.com/form-submit
</span></code></pre></td></tr></table></div></figure>


<h3>POST with JSON body</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -H <span class="s2">&quot;Content-Type: application/json&quot;</span> -d <span class="s2">&quot;{&#39;happy&#39;: &#39;yes&#39;}&quot;</span> http://www.example.com/json
</span></code></pre></td></tr></table></div></figure>


<h3>Take a body from stdin</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;{&quot;text&quot;: &quot;Hello **world**!&quot;}&#39;</span> <span class="p">|</span> curl -d @- https://api.github.com/markdown
</span></code></pre></td></tr></table></div></figure>


<h3>Output HTTP status only</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl  http://www.google.com -sL -w <span class="s2">&quot;%{http_code}\\n&quot;</span> -o /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>The key flat here is <code>-w</code> which prints the report using a custom format. Here is a list of available custom variables:</p>

<pre><code>url_effective
http_code
http_connect
time_total
time_namelookup
time_connect
time_pretransfer
time_redirect
time_starttransfer
size_download
size_upload
size_header
size_request
speed_download
speed_upload
content_type
num_connects
num_redirects
ftp_entry_path
</code></pre>

<h3>Check status of multiple URLs</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for</span> i in gumtree bbc<span class="p">;</span> <span class="k">do</span> curl  http://www.<span class="nv">$i</span>.com -sL -w <span class="s2">&quot;%{http_code} %{url_effective}\\n&quot;</span> -o /dev/null<span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">200</span> https://www.gumtree.com/
</span><span class='line'><span class="m">200</span> http://www.bbc.com/
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customized Property Serialization in Jackson]]></title>
    <link href="http://roozky.herokuapp.com//blog/2015/08/29/customized-property-serialization-in-jackson/"/>
    <updated>2015-08-29T12:26:00+01:00</updated>
    <id>http://roozky.herokuapp.com//blog/2015/08/29/customized-property-serialization-in-jackson</id>
    <content type="html"><![CDATA[<p>Recently I have faced a problem where I was asked to stop serializing selected object&rsquo;s properties into JSON
(to protect sensible information from being logged in json style logs). Code was using Jackson library which has
lovely <code>@JsonIgnore</code> annotation specially designed for this type of problems. It almost looked too easy
but luckily it was bit more complicated and had a change to learn more about Jackson internals.</p>

<p>Issue was that the object was used as a rest api request so I couldn&rsquo;t just ignore a field as it will invalidate
the request. At the same time it was being logged into the application log in the json format (json is easier to
feed to Logstash) and we didn&rsquo;t wanted the field to be logged as it contains information not suitable for logging.</p>

<p>During a search for a solution I had stumble upon <code>@JsonView</code> which looked promising but unfortunately it wasn&rsquo;t
working as it works as inclusion(you tell it which property you want) but I needed exclusion(you tell it which property
you don&rsquo;t want).</p>

<p>At the I was forced to extend a few Jackson classes and configure a mapper to use them.</p>

<p>Firstly I had to to create a custom property writer which gave me full control over property serialization so I could
replace real property value with &lsquo;*&rsquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SensitivePropertyWriter</span> <span class="kd">extends</span> <span class="n">BeanPropertyWriter</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BeanPropertyWriter</span> <span class="n">writer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SensitivePropertyWriter</span><span class="o">(</span><span class="n">BeanPropertyWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">writer</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">writer</span> <span class="o">=</span> <span class="n">writer</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serializeAsField</span><span class="o">(</span><span class="n">Object</span> <span class="n">bean</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">JsonGenerator</span> <span class="n">gen</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">SerializerProvider</span> <span class="n">prov</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">writer</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bean</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>            <span class="n">gen</span><span class="o">.</span><span class="na">writeStringField</span><span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">strValue</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BeanPropertyWriter</span> <span class="nf">withSerializer</span><span class="o">(</span><span class="n">JsonSerializer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">ser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next step was to write a custom bean modifier in which I could configure custom property write on property by property
base. I have just used regexp to match potentially sensitive fields but you can always go a step further and create
an annotation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.SerializationConfig</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.introspect.BasicBeanDescription</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.ser.BeanPropertyWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.ser.BeanSerializerModifier</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SensitivePropertySerializerModifier</span> <span class="kd">extends</span> <span class="n">BeanSerializerModifier</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Pattern</span> <span class="n">PASSWORD_PATTERN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;(?i)password&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BeanPropertyWriter</span><span class="o">&gt;</span> <span class="nf">changeProperties</span><span class="o">(</span><span class="n">SerializationConfig</span> <span class="n">config</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">BasicBeanDescription</span> <span class="n">beanDesc</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="n">List</span><span class="o">&lt;</span><span class="n">BeanPropertyWriter</span><span class="o">&gt;</span> <span class="n">beanProperties</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">beanProperties</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">BeanPropertyWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">beanProperties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">PASSWORD_PATTERN</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">beanProperties</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SensitivePropertyWriter</span><span class="o">(</span><span class="n">writer</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">beanProperties</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step was to configure ObjectMapper to use our new serializer modifier and test it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.SerializationConfig</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.SerializerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.ser.BeanSerializerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">fest</span><span class="o">.</span><span class="na">assertions</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SensitivePropertySerializerModifierTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="n">createMapper</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ObjectMapper</span> <span class="nf">createMapper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SensitivePropertySerializerModifier</span> <span class="n">modifier</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SensitivePropertySerializerModifier</span><span class="o">();</span>
</span><span class='line'>        <span class="n">SerializerFactory</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">BeanSerializerFactory</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">withSerializerModifier</span><span class="o">(</span><span class="n">modifier</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mapper</span><span class="o">.</span><span class="na">setSerializerFactory</span><span class="o">(</span><span class="n">sf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">mapper</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldMaskPasswordFields</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">mapper</span><span class="o">.</span><span class="na">enable</span><span class="o">(</span><span class="n">SerializationConfig</span><span class="o">.</span><span class="na">Feature</span><span class="o">.</span><span class="na">SORT_PROPERTIES_ALPHABETICALLY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="k">new</span> <span class="nf">TestObject</span><span class="o">(</span><span class="s">&quot;password123&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;{\&quot;password\&quot;:\&quot;***********\&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TestObject</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">TestObject</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">TestObject</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
